// <auto-generated />
using System;
using GymHyR.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymHyR.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240401042706_inicial")]
    partial class inicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("Library.Categorias", b =>
                {
                    b.Property<int>("CategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoriaNombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoriaId");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("Library.Clientes", b =>
                {
                    b.Property<string>("Cedula")
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Cedula");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Library.Compra", b =>
                {
                    b.Property<int>("CompraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FecheDeCompra")
                        .HasColumnType("TEXT");

                    b.HasKey("CompraId");

                    b.ToTable("Compra");
                });

            modelBuilder.Entity("Library.CompraDetalle", b =>
                {
                    b.Property<int>("CompraDetalleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CompraId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("PrecioCompra")
                        .HasColumnType("REAL");

                    b.Property<int>("ProductoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Proveedor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("VentaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CompraDetalleId");

                    b.HasIndex("CompraId");

                    b.ToTable("CompraDetalle");
                });

            modelBuilder.Entity("Library.Contactos", b =>
                {
                    b.Property<int>("ContactoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ContactoId");

                    b.ToTable("Contactos");
                });

            modelBuilder.Entity("Library.EstadoMembresias", b =>
                {
                    b.Property<int>("EstadoMembresiaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .HasColumnType("TEXT");

                    b.HasKey("EstadoMembresiaId");

                    b.ToTable("EstadoMembresias");

                    b.HasData(
                        new
                        {
                            EstadoMembresiaId = 1,
                            Descripcion = "Activa"
                        },
                        new
                        {
                            EstadoMembresiaId = 2,
                            Descripcion = "Vencida"
                        });
                });

            modelBuilder.Entity("Library.Membresias", b =>
                {
                    b.Property<int>("MembresiaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EstadoMembresiaId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaFechaFin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("TEXT");

                    b.Property<int>("TipoMembresiaId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("valor")
                        .HasColumnType("TEXT");

                    b.HasKey("MembresiaId");

                    b.HasIndex("Cedula");

                    b.HasIndex("EstadoMembresiaId");

                    b.HasIndex("TipoMembresiaId");

                    b.ToTable("Membresias");
                });

            modelBuilder.Entity("Library.Productos", b =>
                {
                    b.Property<int>("ProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Foto")
                        .HasColumnType("BLOB");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("PrecioCompra")
                        .HasColumnType("REAL");

                    b.Property<float>("PrecioVenta")
                        .HasColumnType("REAL");

                    b.Property<string>("Proveedores")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ProductoId");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("Library.ProveedorDetalle", b =>
                {
                    b.Property<int>("DetalleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Contacto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ContactoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DetalleId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("ProveedorDetalle");
                });

            modelBuilder.Entity("Library.Proveedores", b =>
                {
                    b.Property<int>("ProveedorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Foto")
                        .HasColumnType("BLOB");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("RNC")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ProveedorId");

                    b.ToTable("Proveedores");
                });

            modelBuilder.Entity("Library.TipoMembresias", b =>
                {
                    b.Property<int>("TipoMembresiaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .HasColumnType("TEXT");

                    b.Property<int>("DiasDuracion")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Precio")
                        .HasColumnType("TEXT");

                    b.HasKey("TipoMembresiaId");

                    b.ToTable("TipoMembresias");

                    b.HasData(
                        new
                        {
                            TipoMembresiaId = 1,
                            Descripcion = "Mensual",
                            DiasDuracion = 30,
                            Precio = 0m
                        },
                        new
                        {
                            TipoMembresiaId = 2,
                            Descripcion = "Semanal",
                            DiasDuracion = 5,
                            Precio = 0m
                        },
                        new
                        {
                            TipoMembresiaId = 3,
                            Descripcion = "Diario",
                            DiasDuracion = 1,
                            Precio = 0m
                        });
                });

            modelBuilder.Entity("Library.VentaDetalle", b =>
                {
                    b.Property<int>("VentaDetalleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<float>("PrecioVenta")
                        .HasColumnType("REAL");

                    b.Property<int>("ProductoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VentaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("VentaDetalleId");

                    b.HasIndex("VentaId");

                    b.ToTable("VentaDetalle");
                });

            modelBuilder.Entity("Library.Ventas", b =>
                {
                    b.Property<int>("VentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<float>("Valor")
                        .HasColumnType("REAL");

                    b.HasKey("VentaId");

                    b.ToTable("Venta");
                });

            modelBuilder.Entity("Library.Visitas", b =>
                {
                    b.Property<int>("VisitaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cedula")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MembresiaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("VisitaId");

                    b.HasIndex("Cedula");

                    b.HasIndex("MembresiaId");

                    b.ToTable("Visitas");
                });

            modelBuilder.Entity("Library.CompraDetalle", b =>
                {
                    b.HasOne("Library.Compra", null)
                        .WithMany("CompraDetalles")
                        .HasForeignKey("CompraId");
                });

            modelBuilder.Entity("Library.Membresias", b =>
                {
                    b.HasOne("Library.Clientes", null)
                        .WithMany("Membresias")
                        .HasForeignKey("Cedula")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.EstadoMembresias", null)
                        .WithMany("Membresias")
                        .HasForeignKey("EstadoMembresiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.TipoMembresias", null)
                        .WithMany("Membresias")
                        .HasForeignKey("TipoMembresiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.ProveedorDetalle", b =>
                {
                    b.HasOne("Library.Proveedores", null)
                        .WithMany("ProveedoresDetalle")
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.VentaDetalle", b =>
                {
                    b.HasOne("Library.Ventas", null)
                        .WithMany("VentaDetalle")
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Visitas", b =>
                {
                    b.HasOne("Library.Clientes", null)
                        .WithMany("Visitas")
                        .HasForeignKey("Cedula");

                    b.HasOne("Library.Membresias", null)
                        .WithMany("Visitas")
                        .HasForeignKey("MembresiaId");
                });

            modelBuilder.Entity("Library.Clientes", b =>
                {
                    b.Navigation("Membresias");

                    b.Navigation("Visitas");
                });

            modelBuilder.Entity("Library.Compra", b =>
                {
                    b.Navigation("CompraDetalles");
                });

            modelBuilder.Entity("Library.EstadoMembresias", b =>
                {
                    b.Navigation("Membresias");
                });

            modelBuilder.Entity("Library.Membresias", b =>
                {
                    b.Navigation("Visitas");
                });

            modelBuilder.Entity("Library.Proveedores", b =>
                {
                    b.Navigation("ProveedoresDetalle");
                });

            modelBuilder.Entity("Library.TipoMembresias", b =>
                {
                    b.Navigation("Membresias");
                });

            modelBuilder.Entity("Library.Ventas", b =>
                {
                    b.Navigation("VentaDetalle");
                });
#pragma warning restore 612, 618
        }
    }
}
