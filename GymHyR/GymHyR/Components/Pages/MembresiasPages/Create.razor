@page "/Create_Membresias"
@inject MembresiasServices MembresiasServices
@inject ClientesServices ClientesServices
@inject TipoMembresiasServices TipoMembresiasServices
@inject EstadoMembresiasServices EstadoMembresiasServices
@using Library.Models;
@using Services
@rendermode InteractiveServer

<PageTitle>Registro de Membresías</PageTitle>

<EditForm Model="membresia" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h1>Registro de Membresías</h1>
        </div>
        <div class="card-body">
            <!-- Para el cliente -->
            <label class="form-label">Cliente</label>
            <select @bind="membresia.Cedula" class="form-control">
                <option value="">Seleccione un cliente</option>
                @foreach (var cliente in clientesList)
                {
                    <option value="@cliente.Cedula">@cliente.Nombre</option>
                }
            </select>
            <ValidationMessage For="@(() => membresia.Cedula)" />

            <!-- Para el tipo de membresía -->
            <label class="form-label">Tipo de Membresía</label>
            <select @bind="membresia.TipoMembresiaId" class="form-control">
                <option value="">Seleccione un tipo de membresía</option>
                @foreach (var tipoMembresia in tiposMembresiaList)
                {
                    <option value="@tipoMembresia.TipoMembresiaId">@tipoMembresia.Descripcion</option>
                }
            </select>
            <ValidationMessage For="@(() => membresia.TipoMembresiaId)" />

            <!-- Para el estado de membresía -->
            <label class="form-label">Estado de Membresía</label>
            <select @bind="membresia.EstadoMembresiaId" class="form-control">
                <option value="">Seleccione un estado de membresía</option>
                @foreach (var estadoMembresia in estadosMembresiaList)
                {
                    <option value="@estadoMembresia.EstadoMembresiaId">@estadoMembresia.Descripcion</option>
                }
            </select>
            <ValidationMessage For="@(() => membresia.EstadoMembresiaId)" />
        </div>
        <div class="card-footer d-flex justify-content-center">
            <button type="submit" class="btn btn-outline-success"><i class="bi bi-floppy"></i> Crear</button>
        </div>
    </div>
</EditForm>

@code {
    public Membresias membresia { get; set; } = new Membresias();
    public List<Clientes> clientesList { get; set; } = new List<Clientes>();
    public List<TipoMembresias> tiposMembresiaList { get; set; } = new List<TipoMembresias>();
    public List<EstadoMembresias> estadosMembresiaList { get; set; } = new List<EstadoMembresias>();
    public decimal valorMembresia { get; set; }

    protected override async Task OnInitializedAsync()
    {
        clientesList = await ClientesServices.GetList(c => true);
        tiposMembresiaList = await TipoMembresiasServices.GetList(c => true);
        estadosMembresiaList = await EstadoMembresiasServices.GetList(c => true);
    }

    async Task Guardar()
    {
        // Verificar si el cliente ya tiene alguna membresía
        var clienteTieneMembresia = await MembresiasServices.ClienteTieneMembresia(membresia.Cedula);

        if (clienteTieneMembresia)
        {
            // El cliente ya tiene una membresía, mostrar mensaje de error o tomar alguna acción
            Console.WriteLine("El cliente ya tiene una membresía registrada.");
        }
        else
        {
            var tipoMembresiaSeleccionado = tiposMembresiaList.FirstOrDefault(t => t.TipoMembresiaId == membresia.TipoMembresiaId);

            if (tipoMembresiaSeleccionado != null)
            {
                membresia.valor += CalcularValorMembresia(tipoMembresiaSeleccionado);
                membresia.FechaFechaFin = membresia.FechaInicio.AddDays(tipoMembresiaSeleccionado.DiasDuracion);
            }

            await MembresiasServices.Guardar(membresia);
            Nuevo();
        }
    }


    void Nuevo()
    {
        membresia = new Membresias();
        valorMembresia = 0; 
    }

    decimal CalcularValorMembresia(TipoMembresias tipoMembresia)
    {
        switch (tipoMembresia.Descripcion)
        {
            case "Mensual":
                return 1500;
            case "Semanal":
                return 400;
            case "Diario":
                return 150;
            default:
                return 0;
        }
    }

    void ActualizarValorMembresia(ChangeEventArgs e)
    {
        var tipoMembresiaSeleccionado = tiposMembresiaList.FirstOrDefault(t => t.TipoMembresiaId.ToString() == membresia.TipoMembresiaId.ToString());
        if (tipoMembresiaSeleccionado != null)
        {
            membresia.valor = CalcularValorMembresia(tipoMembresiaSeleccionado);
        }
    }
}
