@page "/CreateProducto"
@using Library
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using GymHyR.Services
@rendermode InteractiveServer
@inject CategoriasServices categoriasServices
@inject ProveedoresServices proveedoresServices
@inject ProductosServices productoService
@inject NavigationManager navigationManager
@inject NotificationService notificationServices
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Productos</PageTitle>

<RadzenNotification/>
<EditForm Model="@producto" OnValidSubmit="Guardar" FormName="Productos">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3>Crear de Productos</h3>
                <div>
                    <a href="/CreateCategoria" class="btn btn-outline-primary">Crear Categoria</a>
                </div>
            </div>

            <div class="row card-body">

                <div class="row mb-3">
                    <div class="col-4">
                        @*Producto Id*@
                        <label class="form-label" for="productoId"><strong>ProductoId:</strong></label>
                        <InputNumber id="productoId" class="form-control" @bind-Value="producto.ProductoId" readonly></InputNumber>
                    </div>
                    <div class="col-4">
                        @*FechaCreacion*@
                        <label class="form-label" for="fechaCreacion"><strong>Fecha Creaci&oacute;n:</strong></label>
                        <InputDate id="fechaCreacion" class="form-control" @bind-Value="producto.FechaCreacion" readonly></InputDate>
                        <ValidationMessage For="@(() => producto.FechaCreacion)"></ValidationMessage>

                    </div>
                    <div class="col-4">
                        <label>Foto del producto:</label>
                        <div class="input-group mb-3">
                            <InputFile OnChange="CargarImagen" class="form-control" accept=".png, .jpg, .jpeg"></InputFile>
                        </div>
                    </div>
                    
                    <div class="col-4">
                        @*Nombre*@
                        <label class="form-label" for="nombre"><strong>Nombre:</strong></label>
                        <InputText id="nombre" class="form-control" @bind-Value="producto.Nombre" placeholder="Ej: Proteina 200g"></InputText>
                        <ValidationMessage For="@(() => producto.Nombre)"></ValidationMessage>
                    </div>

                    <div class="col-4">
                        @*Descripcion*@
                        <label class="form-label" for="descripcion"><strong>Descripci&oacute;n:</strong></label>
                        <InputTextArea id="descripcion" class="form-control" @bind-Value="producto.Descripcion" placeholder="Ej: Proteina muscular"></InputTextArea>
                        <ValidationMessage For="@(() => producto.Descripcion)"></ValidationMessage>
                    </div>
                    <div class="col-2">
                        @*Precio*@
                        <label class="form-label" for="precio"><strong>Precio Venta:</strong></label>
                        <InputNumber id="precio" class="form-control" @bind-Value="producto.PrecioVenta"></InputNumber>
                        <ValidationMessage For="@(() => producto.PrecioVenta)"></ValidationMessage>
                    </div>
                    <div class="col-2">
                        @*Cantidad*@
                        <label class="form-label" for="Cantidad"><strong>Cantidad:</strong></label>
                        <InputNumber id="Cantidad" class="form-control" @bind-Value="producto.Cantidad"></InputNumber>
                        <ValidationMessage For="@(() => producto.Cantidad)"></ValidationMessage>
                    </div>

                    <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                        <label>Precio Compra</label>
                        <div class="input-group mb-3">
                            <InputNumber @bind-Value="@producto.PrecioCompra" class="form-control" />
                            <ValidationMessage For="@(() => producto.PrecioCompra)" />
                        </div>
                    </div>

                    <div class="col-md-6">
                        <label>Categoria:</label>
                        <InputSelect id="categoria" class="form-select" @bind-Value="producto.Categoria">
                            <option value="">Seleccionar Categoria</option>
                            @foreach (var item in categorias)
                            {
                                <option value="@item.CategoriaNombre">@item.CategoriaNombre</option>
                            }
                        </InputSelect>

                    </div>
                    <div class="col-md-6">
                        <label>Proveedores:</label>
                        <InputSelect id="proveedores" class="form-select" @bind-Value="producto.Proveedores" >
                            <option value="">Seleccionar proveedor</option>
                            @foreach (var item in proveedores)
                            {
                                <option value="@item.ProveedorId">@item.Nombre</option>
                            }
                        </InputSelect>

                    </div>
                </div>

            </div>


            <div class="card-footer d-flex justify-content-center">
                <div class="btn-group">
                    <button type="submit" class="btn btn-outline-success"><i class="bi bi-floppy-fill"></i> Guardar</button>
                    <a href="/InventarioIndex" class="btn btn-outline-primary"><i class="bi bi-arrow-left"></i> Volver</a>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Productos producto = new Productos();
    public IEnumerable<Categorias> categorias = new List<Categorias>();
    public IEnumerable<Proveedores> proveedores = new List<Proveedores>();
    public List<Proveedores> listaProveedores = new List<Proveedores>();
    public int proveedor { get; set; }
    public string categoria { get; set; } = string.Empty;
    public float costo { get; set; } = 0;


    protected override async Task OnInitializedAsync()
    {
        categorias = await categoriasServices.GetCategorias();
        proveedores = await proveedoresServices.GetProveedores();
    }
    public async Task Guardar()
    {
        if (string.IsNullOrEmpty(producto.Nombre))
        {

            var Mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Error al guardar",
                    Detail = "debe de llenar todos los campos",
                    Duration = 1_000
                };
            notificationServices.Notify(Mensaje);
            return;
        }

        var response = await productoService.PostProducto(producto);
        if (response != null)
        {
            var Mensaje1 = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Guardado",
                    Detail = "Contacto guardado con exito",
                    Duration = 1000
                };
            notificationServices.Notify(Mensaje1);
            await Task.Delay(1000);
            navigationManager.NavigateTo("/InventarioIndex");
        }
        else
        {
            var Mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error al guardar",
                    Detail = "Ha ocurrido un error",
                    Duration = 1_000
                };
            notificationServices.Notify(Mensaje);
        }
    }

    public async Task CargarImagen(InputFileChangeEventArgs e)
    {
        var archivo = e.File;
        var buffer = new byte[archivo.Size];

        await archivo.OpenReadStream().ReadAsync(buffer);
        producto.Foto = buffer;
    }

}