@page "/DeleteCompra/{Id:int}"
@using Library
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using GymHyR.Services
@rendermode InteractiveServer
@inject ComprasServices comprasServices
@inject ProveedoresServices proveedoresServices
@inject ProductosServices productosServices
@inject NavigationManager navigationManager
@inject NotificationService notificationServices
@inject IJSRuntime JSRuntime

<RadzenNotification />
<PageTitle>Eliminar Proveedor</PageTitle>

<div class="container">
	<div class="row justify-content-center">
		<div class="col-md-8">
			<div class="card shadow-lg">
				<!-- Header -->
				<div class="card-header">
					<h3><strong>Eliminar Compra</strong></h3>
					<a href="/CompraIndex" class="btn btn-outline-primary"><i class="bi bi-arrow-left"></i></a>
				</div>
				<!-- Body -->
				<div class="card-body">
					<!-- Datos de la compra -->
					<div class="col-md-11 mx-auto">
						<h3 class="text-center"><strong>Datos de la compra</strong></h3>
						<div class="border-primmary border border-2 borde">
							<div class="card-body">
								<ul class="list-unstyled" style="margin-top: 20px; margin-bottom: 20px;">
									<li><strong>ProveedorId:</strong> @Compras.CompraId</li>
									<li><strong>FechaCreacion:</strong> @Compras.FecheDeCompra.ToShortDateString()</li>
								</ul>
							</div>
						</div>
					</div>
					<!-- Productos -->
					<div class="col-md-11 mx-auto">
						<h3 class="text-center"><strong>Productos</strong></h3>
						@if (Compras.CompraDetalles.Count > 0)
						{
							<table class="table table-bordered miTabla">
								<thead>
									<tr>
										<th>Producto</th>
										<th>Cantidad</th>
										<th>Precio Compra</th>
									</tr>
								</thead>
								<tbody>
									@foreach (var detalle in Compras.CompraDetalles)
									{
										<tr>
											<td>@ObtenerProducto(detalle.ProductoId)</td>
											<td>@detalle.Cantidad</td>
											<td>@detalle.PrecioCompra</td>
										</tr>
									}
								</tbody>
							</table>
							<p><strong>Total de compras: </strong>@Compras.CompraDetalles.Count</p>
						}
					</div>
					<div class="card-footer d-flex justify-content-center mt-3">
						<div class="btn-group">
							<a href="/CompraIndex" class="btn btn-outline-primary"><i class="bi bi-arrow-left" />Volver</a>
							<button type="button" class="btn btn-outline-danger" @onclick="ConfirmarEliminar"><i class="bi bi-trash-fill" /> Eliminar</button>
						</div>
					</div>
				</div>
			</div>
		</div>

	</div>
</div>


@code {

	[Parameter]
	public int Id { get; set; }
	private Compra Compras { get; set; } = new Compra();
	public IEnumerable<Productos> Productos { get; set; } = new List<Productos>();

	protected override async Task OnInitializedAsync()
	{
		if (Id > 0)
		{
			Compras = await comprasServices.GetCompra(Id);
			Productos = await productosServices.GetProductos();
		}
	}
	private async Task Eliminar()
	{
		if (Id != 0)
		{
			// Almacenar el precio original de cada producto
			Dictionary<int, float> preciosOriginales = new Dictionary<int, float>();
			foreach (var detalle in Compras.CompraDetalles)
			{
				var producto = Productos.FirstOrDefault(p => p.ProductoId == detalle.ProductoId);
				if (producto != null)
				{
					preciosOriginales.Add(detalle.ProductoId, producto.PrecioCompra);
				}
			}

			// Restar las cantidades de productos correspondientes a los detalles de la compra
			foreach (var detalle in Compras.CompraDetalles)
			{
				var producto = Productos.FirstOrDefault(p => p.ProductoId == detalle.ProductoId);
				if (producto != null)
				{
					producto.Cantidad -= detalle.Cantidad;
					await productosServices.PutProducto(producto.ProductoId, producto);
				}
			}

			// Restaurar el precio de compra original de cada producto
			foreach (var detalle in Compras.CompraDetalles)
			{
				if (preciosOriginales.TryGetValue(detalle.ProductoId, out float precioOriginal))
				{
					var producto = Productos.FirstOrDefault(p => p.ProductoId == detalle.ProductoId);
					if (producto != null)
					{
						producto.PrecioCompra = precioOriginal;
						await productosServices.PutProducto(producto.ProductoId, producto);
					}
				}
			}

			// Eliminar la compra
			await comprasServices.DeleteCompras(Id);

			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Eliminación exitosa",
					Detail = "Se ha eliminado la compra",
					Duration = 1_000
				};
			notificationServices.Notify(Mensaje);
			await Task.Delay(1000);
			navigationManager.NavigateTo("/CompraIndex");
		}
	}

	private async Task ConfirmarEliminar()
	{
		bool confirmacion = await JSRuntime.InvokeAsync<bool>("confirm", "¿Está seguro de que desea eliminar esta compra?");
		if (confirmacion)
		{
			await Eliminar();
		}
	}
	
	public string ObtenerProducto(int id)
	{
		var dato = Productos.FirstOrDefault(c => c.ProductoId == id);

		return dato.Nombre;
	}
}

