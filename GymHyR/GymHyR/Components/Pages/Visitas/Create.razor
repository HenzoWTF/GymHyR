@page "/Create_Visitas"
@inject VisitasServices VisitasServices
@inject MembresiasServices MembresiasServices
@inject ClientesServices ClientesServices
@inject NotificationService notificationServices
@using GymHyR.Services
@rendermode InteractiveServer

<PageTitle>Registro de Visitas</PageTitle>
<RadzenNotification />
<EditForm Model="visita" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card">
        <div class="card-header">
            <div>
                <a href="VisitasIndex" class="btn btn-outline-primary"><i class="bi bi-arrow-left"></i> </a>
            </div>
            <h1>Registro de Visitas</h1>
        </div>
        <div class="card-body">
            <!-- Para la Cédula del Cliente -->
            <label class="form-label">Cédula del Cliente</label>
            <InputText @bind-Value="visita.Cedula" class="form-control" />
            <ValidationMessage For="@(() => visita.Cedula)" />
        </div> <!-- Cierre de card-body -->

        <div class="card-footer d-flex justify-content-center">
            <!-- Botón de guardar siempre activo, verificación al intentar guardar -->
            <button type="submit" class="btn btn-outline-success"><i class="bi bi-floppy"></i> Crear</button>
        </div>
    </div>

    <!-- Elemento HTML para mostrar el mensaje de error -->
    <p class="text-danger">@MensajeError</p>
</EditForm>

@code {
    public Visitas visita { get; set; } = new Visitas();
    public string MensajeError { get; set; } = "";

    async Task Guardar()
    {
        if (string.IsNullOrEmpty(visita.Cedula))
        {
            var Mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Debe ingresar una cédula ",
                    Detail = "Ha ocurrido un error",
                    Duration = 1_000
                };
            notificationServices.Notify(Mensaje);
            await Task.Delay(1000);
            return;
        }

        var clienteEncontrado = await ClientesServices.BuscarPorCedula(visita.Cedula);
        if (clienteEncontrado != null)
        {
            var membresiaCliente = await MembresiasServices.GetList(m => m.Cedula == clienteEncontrado.Cedula && m.EstadoMembresiaId == 1);

            if (membresiaCliente.Any())
            {
          
                visita.Cedula = clienteEncontrado.Cedula; 
                if (await VisitasServices.Guardar(visita))
                {
                    var Mensaje1 = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = "Guardado",
                            Detail = "Visita registrada",
                            Duration = 1000
                        };
                    notificationServices.Notify(Mensaje1);
                    await Task.Delay(1000);

                    Nuevo();
                }
                else
                {
                    MostrarError("No se pudo guardar la visita.");
                }
            }
            else
            {

                var Mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Membresia no activa.",
                        Detail = "Ha ocurrido un error",
                        Duration = 1_000
                    };
                notificationServices.Notify(Mensaje);
                await Task.Delay(1000);
                return;
            }
        }
        else
        {
            var Mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Cliente no encontrado",
                    Detail = "Ha ocurrido un error",
                    Duration = 1_000
                };
            notificationServices.Notify(Mensaje);
            return;
        }
    }

    void Nuevo()
    {
        visita = new Visitas();
    }

    void MostrarError(string mensaje)
    {
        MensajeError = mensaje;
    }
}
