@page "/Create_Visitas"
@inject VisitasServices VisitasServices
@inject MembresiasServices MembresiasServices
@inject ClientesServices ClientesServices
@using Library.Models;
@rendermode InteractiveServer
<PageTitle>Registro de Visitas</PageTitle>

<EditForm Model="visita" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card">
        <div class="card-header">
            <h1>Registro de Visitas</h1>
        </div>
        <div class="card-body">
            <!-- Para la Cedula del Cliente -->
            <label class="form-label">Cédula del Cliente</label>
            <InputText @bind-Value="cliente.Cedula" class="form-control" />
            <ValidationMessage For="@(() => cliente.Cedula)" />

            <!-- Para la Membresía ID -->
            <label class="form-label">Membresía ID</label>
            <InputNumber @bind-Value="visita.MembresiaId" class="form-control" />
            <ValidationMessage For="@(() => visita.MembresiaId)" />
        </div>
        <div class="card-footer d-flex justify-content-center">
            <!-- Botón de guardar siempre activo, verificación al intentar guardar -->
            <button type="submit" class="btn btn-outline-success"><i class="bi bi-floppy"></i> Crear</button>
        </div>
    </div>
</EditForm>

@code {
    public Visitas visita { get; set; } = new Visitas();
    public Clientes cliente { get; set; } = new Clientes();

    async Task Guardar()
    {
        if (await VisitasServices.Existe(visita.VisitaId))
        {
            // Manejar caso de visita existente
        }
        else
        {
            bool cedulaExistente = await ClientesServices.ExisteCedula(cliente.Cedula);
            if (cedulaExistente)
            {
                cliente = await ClientesServices.BuscarPorCedula(cliente.Cedula);
                if (cliente != null && cliente.Membresias != null && cliente.Membresias.Any(m => m.EstadoMembresiaId == 1)) // Suponiendo que 1 es el ID para "Activa"
                {
                    // La membresía del cliente está activa, guardar la visita
                    if (await VisitasServices.Guardar(visita))
                    {
                        Nuevo();
                    }
                    else
                    {
                        // Manejar error al guardar visita
                        MostrarError("No se pudo guardar la visita.");
                    }
                }
                else
                {
                    // La membresía del cliente no está activa, mostrar mensaje de error
                    MostrarError("No se puede registrar una visita si la membresía del cliente no está activa.");
                }
            }
            else
            {
                // Cliente no encontrado, mostrar mensaje de error
                MostrarError("Cliente no encontrado.");
            }
        }
    }

    void Nuevo()
    {
        visita = new Visitas();
    }

    void MostrarError(string mensaje)
    {
        // Lógica para mostrar el mensaje de error, por ejemplo, con un componente Toast o Alert
        // Aquí puedes implementar cómo deseas mostrar el mensaje de error en tu interfaz
    }
}
