@page "/IndexMembresia"
@using GymHyR.Services
@inject MembresiasServices MembresiasServices
@inject ClientesServices ClientesServices
@inject TipoMembresiasServices TipoMembresiasServices
@inject EstadoMembresiasServices EstadoMembresiasServices
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div class="mt-4">
    <h2>Filtrar Membresías</h2>
    <div class='row'>
        <div class='col-md-3'>
            <label>Criterio de Búsqueda por ID</label>
            <div class="input-group mb-3">
                <input id="criterioBusqueda" type="text" class="form-control" @bind="criterio" />
                <button type="button" @onclick="FiltrarPorId" class="btn btn-primary">Buscar por ID</button>
            </div>
        </div>
        <div class='col-md-3'>
            <label>Fecha de Inicio</label>
            <InputDate @bind-Value="fechaInicio" class="form-control"></InputDate>
        </div>
        <div class='col-md-3'>
            <label>Fecha de Fin</label>
            <InputDate @bind-Value="fechaFin" class="form-control"></InputDate>
        </div>
        <div class='col-md-3'>
            <label></label>
            <button type="button" @onclick="FiltrarPorFecha" class="btn btn-primary">Filtrar por Fecha</button>
        </div>
    </div>
</div>

<table class="table table-bordered">
    <thead>
        <tr>
            <th>Membresía ID</th>
            <th>Cliente</th>
            <th>Tipo de Membresía</th>
            <th>Estado de Membresía</th>
            <th>Fecha de Inicio</th>
            <th>Fecha de Fin</th>
            <th>Acumulado</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var membresia in L_MembresiasFiltradas)
        {
            <tr>
                <td>@membresia.MembresiaId</td>
                <td>@ObtenerNombreCliente(membresia.Cedula)</td>
                <td>@ObtenerDescripcionTipoMembresia(membresia.TipoMembresiaId)</td>
                <td>@ObtenerDescripcionEstadoMembresia(membresia.EstadoMembresiaId)</td>
                <td>@membresia.FechaInicio.ToShortDateString()</td>
                <td>@membresia.FechaFechaFin.ToShortDateString()</td>
                <td>@membresia.valor.ToString("N2")</td>
                @if (membresia.EstadoMembresiaId == 2)
                {
                    <td><a href="/Ed_Membresias/@membresia.MembresiaId" class="btn btn-outline-success"><i class="bi bi-pencil-square"></i></a></td>
                }
                else
                {
                    <td></td>
                }
                <td><a href="/DeleteMembresia/@membresia.MembresiaId" class="btn btn-outline-danger"><i class="bi bi-file-earmark-x"></i></a></td>
                <td><a href="/ViewMembresia/@membresia.MembresiaId" class="btn btn-outline-primary"><i class="bi bi-ticket-detailed"></i></a></td>
            </tr>
        }
    </tbody>
    <button type="button" @onclick="LimpiarFiltros" class="btn btn-outline-secondary bi bi-arrow-clockwise"> Reiniciar Filtro</button>
</table>


<div class="mt-4">
    <h3>Total Valor Membresías: @ObtenerTotalValorMembresias().ToString("N2")</h3>
</div>

@code {
    public List<Membresias> L_Membresias { get; set; } = new List<Membresias>();
    public List<Clientes> ClientesList { get; set; } = new List<Clientes>();
    public List<TipoMembresias> TiposMembresiaList { get; set; } = new List<TipoMembresias>();
    public List<EstadoMembresias> EstadosMembresiaList { get; set; } = new List<EstadoMembresias>();

    public List<Membresias> L_MembresiasFiltradas { get; set; } = new List<Membresias>();

    public string criterio { get; set; } = string.Empty;
    public DateTime fechaInicio { get; set; } = DateTime.Today.AddMonths(-1); // Default: hace un mes
    public DateTime fechaFin { get; set; } = DateTime.Today;

    protected override async Task OnInitializedAsync()
    {
        await CargarListas();
        FiltrarTodo();
    }

    async Task CargarListas()
    {
        L_Membresias = await MembresiasServices.GetList(m => m.FechaInicio > DateTime.Now.AddDays(-30));
        ClientesList = await ClientesServices.GetList(c => true);
        TiposMembresiaList = await TipoMembresiasServices.GetList(t => true);
        EstadosMembresiaList = await EstadoMembresiasServices.GetList(e => true);

        L_MembresiasFiltradas.AddRange(L_Membresias);
    }

    void FiltrarTodo()
    {
        L_MembresiasFiltradas.Clear();
        L_MembresiasFiltradas.AddRange(L_Membresias);
    }

    void FiltrarPorId()
    {
        L_MembresiasFiltradas = L_Membresias.Where(m => m.MembresiaId.ToString().Contains(criterio)).ToList();
    }

    void FiltrarPorFecha()
    {
        L_MembresiasFiltradas = L_Membresias.Where(m =>
            m.FechaInicio >= fechaInicio && m.FechaInicio <= fechaFin).ToList();
    }

    void LimpiarFiltros()
    {
        criterio = string.Empty;
        fechaInicio = DateTime.Today.AddMonths(-1);
        fechaFin = DateTime.Today;
        FiltrarTodo();
    }

    string ObtenerNombreCliente(string cedula)
    {
        var cliente = ClientesList.FirstOrDefault(c => c.Cedula == cedula);
        return cliente?.Nombre ?? "Cliente no encontrado";
    }

    string ObtenerDescripcionTipoMembresia(int tipoMembresiaId)
    {
        var tipoMembresia = TiposMembresiaList.FirstOrDefault(t => t.TipoMembresiaId == tipoMembresiaId);
        return tipoMembresia?.Descripcion ?? "Tipo de membresía no encontrado";
    }

    string ObtenerDescripcionEstadoMembresia(int estadoMembresiaId)
    {
        var estadoMembresia = EstadosMembresiaList.FirstOrDefault(e => e.EstadoMembresiaId == estadoMembresiaId);
        return estadoMembresia?.Descripcion ?? "Estado de membresía no encontrado";
    }

    decimal ObtenerTotalValorMembresias()
    {
        decimal total = 0;
        foreach (var membresia in L_MembresiasFiltradas)
        {
            total += membresia.valor;
        }
        return total;
    }
}
