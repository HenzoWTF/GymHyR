@page "/ViewMembresia/{MembresiaId:int}"
@using GymHyR.Services
@using Microsoft.AspNetCore.Authorization
@inject MembresiasServices MembresiasServices
@inject NavigationManager NavigationManager
@inject ClientesServices ClientesServices
@inject TipoMembresiasServices TipoMembresiasServices
@inject EstadoMembresiasServices EstadoMembresiasServices
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Admin, Empleado")]



@if (MembresiaSeleccionada != null)
{
    <RadzenNotification />
    <PageTitle>Detalle de Membresía</PageTitle>

    <div class="container">
        <div class="card shadow-lg">
            <!-- Header -->
            <div class="card-header">
                <a href="/IndexMembresia" class="btn btn-outline-primary"><i class="bi bi-arrow-left"></i> </a>
                <h3><strong>Detalle de Membresía</strong></h3>
            </div>
            <!-- Body -->
            <div class="card-body">
                <!-- Datos de la membresía -->
                <div class="col-md-5 mx-auto">
                    <h3 class="text-center"><strong>Datos de la membresía</strong></h3>
                    <div class="border-primmary border border-2 borde d-flex justify-content-center align-items-center">
                        <div>
                            <ul class="list-unstyled">
                                <li><strong>Membresía ID:</strong> @MembresiaSeleccionada.MembresiaId</li>
                                <li><strong>Nombre del Cliente:</strong> @NombreCliente</li>
                                <li><strong>Tipo de Membresía:</strong> @TipoMembresia</li>
                                <li><strong>Estado de Membresía:</strong> @EstadoMembresia</li>
                                <li><strong>Fecha de Inicio:</strong> @MembresiaSeleccionada.FechaInicio.ToShortDateString()</li>
                                <li><strong>Fecha de Fin:</strong> @MembresiaSeleccionada.FechaFechaFin.ToShortDateString()</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Footer con botones de acción -->
            <div class="card-footer d-flex justify-content-center mt-3">
                <div class="btn-group">
                    <button class="btn btn-outline-primary" @onclick="Volver"><i class="bi bi-box-arrow-left"></i> Volver</button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <p>Cargando...</p>
}

@code {
    [Parameter]
    public int MembresiaId { get; set; }

    public Membresias MembresiaSeleccionada { get; set; }

    public string NombreCliente { get; set; }
    public string TipoMembresia { get; set; }
    public string EstadoMembresia { get; set; }

    protected override async Task OnInitializedAsync()
    {
        MembresiaSeleccionada = await MembresiasServices.Buscar(MembresiaId);
        NombreCliente = await ObtenerNombreCliente(MembresiaSeleccionada.Cedula);
        TipoMembresia = await ObtenerDescripcionTipoMembresia(MembresiaSeleccionada.TipoMembresiaId);
        EstadoMembresia = await ObtenerDescripcionEstadoMembresia(MembresiaSeleccionada.EstadoMembresiaId);
    }

    void Volver()
    {
        NavigationManager.NavigateTo("/IndexMembresia");
    }

    async Task<string> ObtenerNombreCliente(string cedula)
    {
        var cliente = await ClientesServices.Buscar(cedula);
        return cliente != null ? cliente.Nombre : "Cliente no encontrado";
    }

    async Task<string> ObtenerDescripcionTipoMembresia(int tipoMembresiaId)
    {
        var tipoMembresia = await TipoMembresiasServices.Buscar(tipoMembresiaId);
        return tipoMembresia != null ? tipoMembresia.Descripcion : "Tipo de membresía no encontrado";
    }

    async Task<string> ObtenerDescripcionEstadoMembresia(int estadoMembresiaId)
    {
        var estadoMembresia = await EstadoMembresiasServices.Buscar(estadoMembresiaId);
        return estadoMembresia != null ? estadoMembresia.Descripcion : "Estado de membresía no encontrado";
    }
}