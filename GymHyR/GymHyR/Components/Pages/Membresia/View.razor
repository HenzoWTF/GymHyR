@page "/ViewMembresia/{MembresiaId:int}"
@using GymHyR.Services
@inject MembresiasServices MembresiasServices
@inject NavigationManager NavigationManager
@inject ClientesServices ClientesServices
@inject TipoMembresiasServices TipoMembresiasServices
@inject EstadoMembresiasServices EstadoMembresiasServices
@rendermode InteractiveServer

<PageTitle>Detalle de Membresía</PageTitle>

<div class="card">
    <div class="card-header">
        <h2>Detalles</h2>
    </div>
    <div class="card-body">
        @if (MembresiaSeleccionada != null)
        {
            <div>
                <strong>ID de Membresía:</strong> @MembresiaSeleccionada.MembresiaId
            </div>
            <div>
                <strong>Nombre del Cliente:</strong> @NombreCliente
            </div>
            <div>
                <strong>Tipo de Membresía:</strong> @TipoMembresia
            </div>
            <div>
                <strong>Estado de Membresía:</strong> @EstadoMembresia
            </div>
            <div>
                <strong>Valor:</strong> @MembresiaSeleccionada.valor
            </div>
            <div>
                <strong>Fecha de Inicio:</strong> @MembresiaSeleccionada.FechaInicio.ToShortDateString()
            </div>
            <div>
                <strong>Fecha de Fin:</strong> @MembresiaSeleccionada.FechaFechaFin.ToShortDateString()
            </div>
        }
        else
        {
            <p>La membresía seleccionada no se encontró o no está disponible.</p>
        }
    </div>
    <div class="card-footer d-flex justify-content-center mt-3">
        <div class="btn-group">
            <button class="btn btn-outline-primary" @onclick="Volver"><i class="bi bi-box-arrow-left me-1"></i> Volver</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int MembresiaId { get; set; }

    public Membresias MembresiaSeleccionada { get; set; }

    public string NombreCliente { get; set; }
    public string TipoMembresia { get; set; }
    public string EstadoMembresia { get; set; }

    protected override async Task OnInitializedAsync()
    {
        MembresiaSeleccionada = await MembresiasServices.Buscar(MembresiaId);
        NombreCliente = await ObtenerNombreCliente(MembresiaSeleccionada.Cedula);
        TipoMembresia = await ObtenerDescripcionTipoMembresia(MembresiaSeleccionada.TipoMembresiaId);
        EstadoMembresia = await ObtenerDescripcionEstadoMembresia(MembresiaSeleccionada.EstadoMembresiaId);
    }

    void Volver()
    {
        NavigationManager.NavigateTo("/IndexMembresia");
    }

    async Task<string> ObtenerNombreCliente(string cedula)
    {
        var cliente = await ClientesServices.Buscar(cedula);
        return cliente != null ? cliente.Nombre : "Cliente no encontrado";
    }

    async Task<string> ObtenerDescripcionTipoMembresia(int tipoMembresiaId)
    {
        var tipoMembresia = await TipoMembresiasServices.Buscar(tipoMembresiaId);
        return tipoMembresia != null ? tipoMembresia.Descripcion : "Tipo de membresía no encontrado";
    }

    async Task<string> ObtenerDescripcionEstadoMembresia(int estadoMembresiaId)
    {
        var estadoMembresia = await EstadoMembresiasServices.Buscar(estadoMembresiaId);
        return estadoMembresia != null ? estadoMembresia.Descripcion : "Estado de membresía no encontrado";
    }
}