@page "/Create_Membresias"
@inject MembresiasServices MembresiasServices
@inject ClientesServices ClientesServices
@inject TipoMembresiasServices TipoMembresiasServices
@inject EstadoMembresiasServices EstadoMembresiasServices
@inject NotificationService notificationServices
@inject NavigationManager navigationManager
@using Services
@rendermode InteractiveServer

<PageTitle>Registro de Membresías</PageTitle>
<RadzenNotification />
<EditForm Model="membresia" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container ">
        <div class="card shadow-lg">
            <div class="card-header">
                <div>
                    <a href="IndexMembresia" class="btn btn-outline-primary"><i class="bi bi-arrow-left"></i> </a>
                </div>
                <h1>Registro de Membresías</h1>
            </div>

            <div class="card-body">
               <div class=" justify-content-center">
                    <div class="row mb-3">
                        <div class="col-3">
                            <!-- Para el cliente -->
                            <label class="form-label">Cliente</label>
                            <select @bind="membresia.Cedula" class="form-control">
                                <option value="">Seleccione un cliente</option>
                                @foreach (var cliente in clientesList)
                                {
                                    <option value="@cliente.Cedula">@cliente.Nombre</option>
                                }
                            </select>
                            <ValidationMessage For="@(() => membresia.Cedula)" />
                        </div>

                        <div class="col-3">
                            <!-- Para el tipo de membresía -->
                            <label class="form-label">Tipo de Membresía</label>
                            <select @bind="membresia.TipoMembresiaId" class="form-control">
                                <option value="">Seleccione tipo de membresía</option>
                                @foreach (var tipoMembresia in tiposMembresiaList)
                                {
                                    <option value="@tipoMembresia.TipoMembresiaId">@tipoMembresia.Descripcion</option>
                                }
                            </select>
                            <ValidationMessage For="@(() => membresia.TipoMembresiaId)" />
                        </div>

                        <div class="col-3">
                            <!-- Para el estado de membresía -->
                            <label class="form-label">Estado de Membresía</label>
                            <select @bind="membresia.EstadoMembresiaId" class="form-control">
                                <option value="">Seleccione estado de membresía</option>
                                @foreach (var estadoMembresia in estadosMembresiaList)
                                {
                                    <option value="@estadoMembresia.EstadoMembresiaId">@estadoMembresia.Descripcion</option>
                                }
                            </select>
                            <ValidationMessage For="@(() => membresia.EstadoMembresiaId)" />
                        </div>
                    </div>
                </div>

            </div>
            <div class="card-footer d-flex justify-content-center">
                <button type="submit" class="btn btn-outline-success"><i class="bi bi-floppy"></i> Crear</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Membresias membresia { get; set; } = new Membresias();
    public List<Clientes> clientesList { get; set; } = new List<Clientes>();
    public List<TipoMembresias> tiposMembresiaList { get; set; } = new List<TipoMembresias>();
    public List<EstadoMembresias> estadosMembresiaList { get; set; } = new List<EstadoMembresias>();
    public decimal valorMembresia { get; set; }

    protected override async Task OnInitializedAsync()
    {
        clientesList = await ClientesServices.GetList(c => true);
        tiposMembresiaList = await TipoMembresiasServices.GetList(c => true);
        estadosMembresiaList = await EstadoMembresiasServices.GetList(c => true);
    }

    async Task Guardar()
    {
        if (!EsClienteGenerico(membresia.Cedula) && await MembresiasServices.ClienteTieneMembresia(membresia.Cedula))
        {
            var Mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Menbresia existente",
                    Detail = "El cliente ta tiene una menbresia",
                    Duration = 1_000
                };
            notificationServices.Notify(Mensaje);
        }
        else
        {
            var tipoMembresiaSeleccionado = tiposMembresiaList.FirstOrDefault(t => t.TipoMembresiaId == membresia.TipoMembresiaId);

            membresia.valor += CalcularValorMembresia(tipoMembresiaSeleccionado);
            membresia.FechaFechaFin = membresia.FechaInicio.AddDays(tipoMembresiaSeleccionado.DiasDuracion);

            await MembresiasServices.Guardar(membresia);
            Nuevo();
        }

        var Mensaje1 = new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Guardado",
                Detail = " Membresia guardada con exito",
                Duration = 1000
            };
        notificationServices.Notify(Mensaje1);
        await Task.Delay(1000);
        
    }


    void Nuevo()
    {
        membresia = new Membresias();
        valorMembresia = 0;
    }

    decimal CalcularValorMembresia(TipoMembresias tipoMembresia)
    {
        switch (tipoMembresia.Descripcion)
        {
            case "Mensual":
                return 1500;
            case "Semanal":
                return 400;
            case "Diario":
                return 150;
            default:
                return 0;
        }
    }

    void ActualizarValorMembresia(ChangeEventArgs e)
    {
        var tipoMembresiaSeleccionado = tiposMembresiaList.FirstOrDefault(t => t.TipoMembresiaId.ToString() == membresia.TipoMembresiaId.ToString());
        if (tipoMembresiaSeleccionado != null)
        {
            membresia.valor = CalcularValorMembresia(tipoMembresiaSeleccionado);
        }
    }

    bool EsClienteGenerico(string cedula)
    {
        return cedula == "402-0054036-0";
    }

    void MostrarMensajeError(string mensaje)
    {

    }
}