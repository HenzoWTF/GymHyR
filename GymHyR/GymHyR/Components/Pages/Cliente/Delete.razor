@page "/DeleteClientes/{Cedula}"
@using GymHyR.Services
@using Microsoft.AspNetCore.Authorization
@inject ClientesServices ClientesServices
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Eliminar Cliente</PageTitle>

<div class="card">
    <div class="card-header">
        <h2>Eliminar Cliente</h2>
    </div>
    <div class="card-body">
        <div>
            <strong>Cédula:</strong> @ClienteSeleccionado.Cedula
        </div>
        <div>
            <strong>Nombre:</strong> @ClienteSeleccionado.Nombre
        </div>
        <div>
            <strong>Fecha de Registro:</strong> @ClienteSeleccionado.Fecha.ToShortDateString()
        </div>
        <div>
            <strong>Correo Electrónico:</strong> @ClienteSeleccionado.Gmail
        </div>
        <div>
            <strong>Teléfono:</strong> @ClienteSeleccionado.Telefono
        </div>
    </div>
    <div class="card-footer d-flex justify-content-center mt-3">
        <div class="btn-group">
            <button class="btn btn-outline-primary" @onclick="Volver"><i class="bi bi-box-arrow-left me-1"></i> Volver</button>
            <button type="submit" class="btn btn-outline-danger ms-2" @onclick="Eliminar"><i class="bi bi-trash"></i> Eliminar</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Cedula { get; set; }

    public Clientes ClienteSeleccionado { get; set; } = new Clientes();

    protected override async Task OnInitializedAsync()
    {
        ClienteSeleccionado = await ClientesServices.Buscar(Cedula);
    }

    void Volver()
    {
        NavigationManager.NavigateTo("/ClientesIndex");
    }


    async Task Eliminar()
    {
        var resultado = await ClientesServices.Eliminar(ClienteSeleccionado);
        if (resultado)
        {
            Volver();
        }
        else
        {
            // Manejar el error o mostrar un mensaje al usuario
        }
    }
}