@page "/CreatePedidos"
@using Library
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using GymHyR.Services
@using System.Security.Claims
@inject ProductosServices productosServices
@inject PedidosServices pedidosServices
@inject NavigationManager navigationManager
@inject NotificationService notificationServices
@attribute [Authorize(Roles = "Cliente")]
@rendermode InteractiveServer


<PageTitle>Pedidos</PageTitle>
<RadzenNotification />

<EditForm Model="@pedido" OnValidSubmit="Guardar" FormName="PedidoForm">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3>Crear Pedido</h3>
            </div>

            <div class="row card-body">
                <div class="row mb-3">
                    <div class="col-4">
                        <label class="form-label"><strong>PedidoId:</strong></label>
                        <InputNumber class="form-control" @bind-Value="pedido.PedidoId" readonly></InputNumber>
                    </div>
                    <div class="col-4">
                        <label class="form-label"><strong>Fecha de Pedido:</strong></label>
                        <InputDate class="form-control" @bind-Value="pedido.FechaPedido" readonly></InputDate>
                    </div>

                </div>


                @*Detalles de la Venta*@
                <fieldset class="border-primmary border border-2">
                    @*Body*@
                    <div class="card-body">
                        <section class="row mb-4">
                            <h3><strong>Detalles</strong></h3>
                            <div class="row align-content-center">
                                <div class="col-md-6">
                                    <label>Productos:</label>
                                    <InputSelect id="Productos" class="form-select" @bind-Value="Producto">
                                        <option value="">Seleccionar Producto</option>
                                        @foreach (var item in Productos)
                                        {
                                            <option value="@item.ProductoId">@item.Nombre</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="col-md-6">
                                    <label>Cantidad:</label>
                                    <InputNumber id="Cantidad" class="form-control" @bind-Value="Cantidad" placeholder="Ingrese la cantidad"></InputNumber>
                                </div>

                                <div class="col-12 d-flex align-items-end">
                                    <button type="button" class="btn btn-outline-success" @onclick="AgregarDetalle"><i class="bi bi-plus-circle" /> Agregar Detalle</button>
                                </div>
                            </div>
                        </section>
                        <section>
                            @if (pedido.Detalles.Count > 0)
                            {
                                @*Tabla de Detalles*@
                                <table class="table table-bordered miTabla">
                                    <thead>
                                        <tr>
                                            <th>Producto</th>
                                            <th>Cantidad</th>
                                            <th>Precio Venta</th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var detalle in pedido.Detalles)
                                        {
                                            <tr>
                                                <td>@ObtenerProducto(detalle.ProductoId)</td>
                                                <td>@detalle.Cantidad</td>
                                                <td>@detalle.PrecioUnitario</td>
                                                <td><button type="button" class="btn btn-outline-danger" @onclick="()=> EliminarDetalle(detalle)"><i class="bi bi-trash3-fill" /></button></td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                                <p><strong>Total de Productos: </strong>@pedido.Detalles.Count</p>
                            }
                        </section>
                    </div>
                </fieldset>

            </div>

            <div class="card-footer d-flex justify-content-center">
                <div class="btn-group">
                    <button type="submit" class="btn btn-outline-success"><i class="bi bi-floppy-fill"></i> Guardar</button>
                    <a href="/PedidosIndex" class="btn btn-outline-primary"><i class="bi bi-arrow-left"></i> Volver</a>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private Pedidos pedido = new Pedidos();
    public IEnumerable<Productos> Productos = new List<Productos>();
    public int Producto { get; set; }
    public int Cantidad { get; set; }
    public float PrecioVenta { get; set; }
    public int Borrar { get; set; }
    public string Nombre = "Cliente";


    protected override async Task OnInitializedAsync()
    {
        Productos = await productosServices.GetProductos();
        pedido.FechaPedido = DateTime.Now;
        pedido.ClienteNombre = Nombre;
    }

    public async Task Guardar()
    {
        if (pedido.Detalles.Count == 0)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error al guardar",
                    Detail = "No se han agregado detalles del pedido",
                    Duration = 4000
                };
            notificationServices.Notify(mensaje);
            return;
        }

        // Validar detalles del pedido
        if (pedido.Detalles.Any(detalle => detalle.Cantidad <= 0))
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error al guardar",
                    Detail = "Se han ingresado detalles de compra con cantidad inválida",
                    Duration = 4000
                };
            notificationServices.Notify(mensaje);
            return;
        }

        // Guardar pedido y detalles
        var response = await pedidosServices.PostPedidos(pedido);
        if (response != null)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Guardado",
                    Detail = "Pedido guardado con éxito",
                    Duration = 1000
                };
            notificationServices.Notify(mensaje);

            await Task.Delay(1000);
            navigationManager.NavigateTo("/PedidosIndex");
        }
        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error al guardar",
                    Detail = "Ha ocurrido un error al guardar el pedido",
                    Duration = 4000
                };
            notificationServices.Notify(mensaje);
        }
    }


    public string ObtenerProducto(int id)
    {
        var dato = Productos.FirstOrDefault(c => c.ProductoId == id);

        return dato.Nombre;
    }


    public bool ValidarDetalleCompleto()
    {
        if (Producto == 0 || Cantidad == 0)
        {
            var mensajeError = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error al guardar",
                    Detail = "Por favor complete todos los campos del detalle y asegúrese de que la cantidad sea mayor que cero",
                    Duration = 3000
                };
            notificationServices.Notify(mensajeError);
            return false;
        }

        return true;
    }

    public async Task AgregarDetalle()
    {
        if (!ValidarDetalleCompleto())
        {
            return;
        }

        var productoSeleccionado = Productos.FirstOrDefault(p => p.ProductoId == Producto);
        if (productoSeleccionado != null)
        {

            var detalleExistente = pedido.Detalles.FirstOrDefault(d => d.ProductoId == Producto);
            if (detalleExistente != null)
            {

                var mensajeError = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error al agregar detalle",
                        Detail = "El producto seleccionado ya está presente en la lista de detalles",
                        Duration = 3000
                    };
                notificationServices.Notify(mensajeError);
            }
            else
            {

                float precioVentaDetalle = Cantidad * productoSeleccionado.PrecioVenta;


                var nuevoDetalle = new PedidoDetalle
                    {
                        ProductoId = Producto,
                        Cantidad = Cantidad,
                        PrecioUnitario = precioVentaDetalle,
                        ProductoNombre = ObtenerProducto(Producto)
                    };


                pedido.Detalles.Add(nuevoDetalle);


                var mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Detalle agregado",
                        Detail = "Se ha agregado un nuevo detalle al pedido",
                        Duration = 3000
                    };
                notificationServices.Notify(mensaje);


                Producto = 0;
                Cantidad = 0;
            }
        }
    }

    public async Task EliminarDetalle(PedidoDetalle detalle)
    {

        pedido.Detalles.Remove(detalle);


        var mensaje = new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Detalle eliminado",
                Detail = "Detalle eliminado del pedido",
                Duration = 1000
            };
        notificationServices.Notify(mensaje);
    }


    public float CalcularTotalVentas()
    {
        float total = 0;
        foreach (var detalle in pedido.Detalles)
        {
            total += detalle.Cantidad * ObtenerProductoPrecio(detalle.ProductoId);
        }
        return total;
    }
    public float ObtenerProductoPrecio(int id)
    {
        var dato = Productos.FirstOrDefault(c => c.ProductoId == id);

        return dato.PrecioVenta;
    }

}