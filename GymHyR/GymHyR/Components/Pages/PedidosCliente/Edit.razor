@page "/EditPedidos/{Id:int}"
@using GymHyR.Services
@rendermode InteractiveServer
@inject PedidosServices pedidosServices
@inject ProductosServices productosServices
@inject NotificationService notificationServices
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Cliente")]



<PageTitle>Pedidos</PageTitle>
<RadzenNotification />

<EditForm Model="@pedido" OnValidSubmit="Guardar" FormName="PedidoForm">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3>Crear Pedido</h3>
            </div>

            <div class="row card-body">
                <div class="row mb-3">
                    <div class="col-4">
                        <label class="form-label"><strong>PedidoId:</strong></label>
                        <InputNumber class="form-control" @bind-Value="pedido.PedidoId" readonly></InputNumber>
                    </div>
                    <div class="col-4">
                        <label class="form-label"><strong>Fecha de Pedido:</strong></label>
                        <InputDate class="form-control" @bind-Value="pedido.FechaPedido" readonly></InputDate>
                    </div>

                </div>


                @*Detalles de los pedidos*@
                <fieldset class="border-primmary border border-2">
                    @*Body*@
                    <div class="card-body">
                        <section class="row mb-4">
                            <h3><strong>Detalles</strong></h3>
                            <div class="row align-content-center">
                                <div class="col-md-6">
                                    <label>Productos:</label>
                                    <InputSelect id="Productos" class="form-select" @bind-Value="Producto">
                                        <option value="">Seleccionar Producto</option>
                                        @foreach (var item in Productos)
                                        {
                                            <option value="@item.ProductoId">@item.Nombre</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="col-md-6">
                                    <label>Cantidad:</label>
                                    <InputNumber id="Cantidad" class="form-control" @bind-Value="Cantidad" placeholder="Ingrese la cantidad"></InputNumber>
                                </div>

                                <div class="col-12 d-flex align-items-end">
                                    <button type="button" class="btn btn-outline-success" @onclick="AgregarDetalle"><i class="bi bi-plus-circle" /> Agregar Detalle</button>
                                </div>
                            </div>
                        </section>
                        <section>
                            @if (pedido.Detalles.Count > 0)
                            {
                                @*Tabla de Detalles*@
                                <table class="table table-bordered miTabla">
                                    <thead>
                                        <tr>
                                            <th>Producto</th>
                                            <th>Cantidad</th>
                                            <th>Precio Venta</th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var detalle in pedido.Detalles)
                                        {
                                            <tr>
                                                <td>@ObtenerProducto(detalle.ProductoId)</td>
                                                <td>@detalle.Cantidad</td>
                                                <td>@detalle.PrecioUnitario</td>
                                                <td><button type="button" class="btn btn-outline-danger" @onclick="()=> EliminarDetalle(detalle)"><i class="bi bi-trash3-fill" /></button></td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                                <p><strong>Total de Productos: </strong>@pedido.Detalles.Count</p>
                            }
                        </section>
                    </div>
                </fieldset>

            </div>

            <div class="card-footer d-flex justify-content-center">
                <div class="btn-group">
                    <button type="submit" class="btn btn-outline-success"><i class="bi bi-floppy-fill"></i> Guardar</button>
                    <a href="/PedidosIndex" class="btn btn-outline-primary"><i class="bi bi-arrow-left"></i> Volver</a>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {

    [Parameter]
    public int Id { get; set; }
    private Pedidos pedido = new Pedidos();
    public IEnumerable<Productos> Productos = new List<Productos>();
    public int Producto { get; set; }
    public int Cantidad { get; set; }
    public float PrecioVenta { get; set; }
    public int Borrar { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Productos = await productosServices.GetProductos();
        pedido.FechaPedido = DateTime.Now;
        pedido = await pedidosServices.GetPedido(Id);
    }

    public async Task Guardar()
    {
        if (pedido.Detalles.Count == 0)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error al guardar",
                    Detail = "No se han agregado detalles del pedido",
                    Duration = 4000
                };
            notificationServices.Notify(mensaje);
            return;
        }

        if (pedido.Detalles.Any(detalle =>
            detalle.ProductoId == 0 || string.IsNullOrEmpty(detalle.ProductoNombre) || detalle.Cantidad <= 0 || detalle.PrecioUnitario <= 0))
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error al guardar",
                    Detail = "Se han ingresado detalles de compra incompletos o inválidos",
                    Duration = 1000
                };
            notificationServices.Notify(mensaje);
            return;
        }

        foreach (var detalle in pedido.Detalles)
        {
            var producto = Productos.FirstOrDefault(p => p.ProductoId == detalle.ProductoId);
            if (producto != null)
            {
                producto.Cantidad -= detalle.Cantidad;
                producto.PrecioVenta = detalle.PrecioUnitario;
                await productosServices.PutProducto(producto.ProductoId, producto);
            }
        }

        var response = await pedidosServices.PostPedidos(pedido);
        if (response != null)
        {
            var Mensaje1 = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Guardado",
                    Detail = "Contacto guardado con exito",
                    Duration = 1000
                };
            notificationServices.Notify(Mensaje1);
            await Task.Delay(1000);
            navigationManager.NavigateTo("/CompraIndex");
        }
        else
        {
            var Mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error al guardar",
                    Detail = "Ha ocurrido un error",
                    Duration = 1_000
                };
            notificationServices.Notify(Mensaje);
        }


    }

    public string ObtenerProducto(int id)
    {
        var dato = Productos.FirstOrDefault(c => c.ProductoId == id);

        return dato.Nombre;
    }
    public async Task AgregarDetalle()
    {
        if (!ValidarDetalleCompleto())
        {
            return;
        }

        var productoSeleccionado = Productos.FirstOrDefault(p => p.ProductoId == Producto);
        if (productoSeleccionado != null)
        {
            if (Cantidad <= productoSeleccionado.Cantidad)
            {
                // Verificar si el detalle ya existe en la lista
                var detalleExistente = pedido.Detalles.FirstOrDefault(d => d.ProductoId == Producto);
                if (detalleExistente != null)
                {
                    // Mostrar mensaje de error porque el detalle ya existe
                    var mensajeError = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error al agregar detalle",
                            Detail = "El producto seleccionado ya está presente en la lista de detalles",
                            Duration = 3000
                        };
                    notificationServices.Notify(mensajeError);
                }
                else
                {

                    int cantidadRestante = productoSeleccionado.Cantidad - Cantidad;

                    if (cantidadRestante >= 0)
                    {
                        float precioVentaDetalle = Cantidad * productoSeleccionado.PrecioVenta;
                        var nuevoDetalle = new PedidoDetalle
                            {
                                ProductoId = Producto,
                                Cantidad = Cantidad,
                                PrecioUnitario = precioVentaDetalle
                            };

                        pedido.Detalles.Add(nuevoDetalle);

                        var mensaje = new NotificationMessage
                            {
                                Severity = NotificationSeverity.Success,
                                Summary = "Detalle agregado",
                                Detail = "Se ha agregado un nuevo detalle a la venta",
                                Duration = 3000
                            };
                        notificationServices.Notify(mensaje);

                        StateHasChanged();
                    }
                    else
                    {
                        var mensajeError = new NotificationMessage
                            {
                                Severity = NotificationSeverity.Error,
                                Summary = "Error al agregar detalle",
                                Detail = "La cantidad ingresada es mayor que la cantidad disponible del producto",
                                Duration = 3000
                            };
                        notificationServices.Notify(mensajeError);
                    }
                }
            }
            else
            {
                var mensajeError = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error al agregar detalle",
                        Detail = "La cantidad ingresada es mayor que la cantidad disponible del producto",
                        Duration = 3000
                    };
                notificationServices.Notify(mensajeError);
            }
        }
    }


    public bool ValidarDetalleCompleto()
    {
        if (Producto == 0 || Cantidad == 0)
        {
            var mensajeError = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error al guardar",
                    Detail = "Por favor complete todos los campos del detalle y asegúrese de que la cantidad sea mayor que cero",
                    Duration = 3000
                };
            notificationServices.Notify(mensajeError);
            return false;
        }

        return true;
    }


    public async Task EliminarDetalle(PedidoDetalle detalle)
    {
        float precioDetalleEliminado = detalle.PrecioUnitario;

        int cantidadDetalleEliminado = detalle.Cantidad;

        pedido.Detalles.Remove(detalle);

        var producto = Productos.FirstOrDefault(p => p.ProductoId == detalle.ProductoId);
        if (producto != null)
        {
            producto.Cantidad += cantidadDetalleEliminado;
            await productosServices.PutProducto(producto.ProductoId, producto);
        }


        var mensaje = new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Detalle eliminado",
                Detail = "Detalle eliminado",
                Duration = 1_000
            };
        notificationServices.Notify(mensaje);
    }

    public float CalcularTotalVentas()
    {
        float total = 0;
        foreach (var detalle in pedido.Detalles)
        {
            total += detalle.Cantidad * ObtenerProductoPrecio(detalle.ProductoId);
        }
        return total;
    }
    public float ObtenerProductoPrecio(int id)
    {
        var dato = Productos.FirstOrDefault(c => c.ProductoId == id);

        return dato.PrecioVenta;
    }


}
