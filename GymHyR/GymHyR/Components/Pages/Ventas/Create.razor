@page "/CreateVentas"
@using GymHyR.Services
@rendermode InteractiveServer
@inject VentasServices VentasServices
@inject ProductosServices productosServices
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@inject NotificationService notificationServices
@inject NavigationManager navigationManager




<PageTitle>Ventas</PageTitle>
<RadzenNotification />

<EditForm Model="@ventas" OnValidSubmit="Guardar" FormName="ventas">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <a href="/VIndex" class="btn btn-outline-primary"><i class="bi bi-arrow-left"></i> </a>
                <h3>Crear Venta</h3>
            </div>

            <div class="row card-body">
                <div class="col-4">
                    @*Venta Id*@
                    <label class="form-label" for="VentaId"><strong>Venta Id:</strong></label>
                    <InputNumber id="VentaId" class="form-control" @bind-Value="ventas.VentaId" readonly></InputNumber>
                </div>

                <div class="col-4">
                    @*FechaCreacion*@
                    <label class="form-label" for="fechaCreacion"><strong>Fecha Creaci&oacute;n:</strong></label>
                    <InputDate id="fechaCreacion" class="form-control" @bind-Value="ventas.Fecha" readonly></InputDate>
                </div>

                <div class="col-4">
                    @*Venta Id*@
                    <label class="form-label" for="VentaId"><strong>Valor de venta:</strong></label>
                    <InputNumber id="VentaId" class="form-control" @bind-Value="ventas.Valor" readonly></InputNumber>
                </div>


            </div>

            @*Detalles de la Venta*@
            <fieldset class="border-primmary border border-2">
                @*Body*@
                <div class="card-body">
                    <section class="row mb-4">
                        <h3><strong>Detalles</strong></h3>
                        <div class="row align-content-center">
                            <div class="col-md-6">
                                <label>Productos:</label>
                                <InputSelect id="Productos" class="form-select" @bind-Value="Producto">
                                    <option value="">Seleccionar Producto</option>
                                    @foreach (var item in Productos)
                                    {
                                        <option value="@item.ProductoId">@item.Nombre</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-md-6">
                                <label>Cantidad:</label>
                                <InputNumber id="Cantidad" class="form-control" @bind-Value="Cantidad" placeholder="Ingrese la cantidad"></InputNumber>
                            </div>

                            <div class="col-12 d-flex align-items-end">
                                <button type="button" class="btn btn-outline-success" @onclick="AgregarDetalle"><i class="bi bi-plus-circle" /> Agregar Detalle</button>
                            </div>
                        </div>
                    </section>
                    <section>
                        @if (ventas.VentaDetalle.Count > 0)
                        {
                            @*Tabla de Detalles*@
                            <table class="table table-bordered miTabla">
                                <thead>
                                    <tr>
                                        <th>Producto</th>
                                        <th>Cantidad</th>
                                        <th>Precio Venta</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var detalle in ventas.VentaDetalle)
                                    {
                                        <tr>
                                            <td>@ObtenerProducto(detalle.ProductoId)</td>
                                            <td>@detalle.Cantidad</td>
                                            <td>@detalle.PrecioVenta</td>
                                            <td><button type="button" class="btn btn-outline-danger" @onclick="()=> EliminarDetalle(detalle)"><i class="bi bi-trash3-fill" /></button></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            <p><strong>Total de Productos: </strong>@ventas.VentaDetalle.Count</p>
                        }
                    </section>
                </div>
            </fieldset>

            <div class="card-footer d-flex justify-content-center">
                <div class="btn-group">
                    <button type="submit" class="btn btn-outline-success"><i class="bi bi-floppy-fill"></i> Guardar</button>
                </div>
            </div>
        </div>
    </div>

</EditForm>

@code {
    public Ventas ventas = new Ventas();
    public int Producto { get; set; }
    public int Cantidad { get; set; }
    public float PrecioVenta { get; set; }
    public IEnumerable<Productos> Productos = new List<Productos>();

    protected override async Task OnInitializedAsync()
    {
        Productos = await productosServices.GetProductos();

    }


    public async Task Guardar()
    {
        foreach (var detalle in ventas.VentaDetalle)
        {
            var producto = Productos.FirstOrDefault(p => p.ProductoId == detalle.ProductoId);
            if (producto != null)
            {
                producto.Cantidad -= detalle.Cantidad;
                await productosServices.PutProducto(producto.ProductoId, producto);
            }
        }

        var response = await VentasServices.PostVentas(ventas);
        if (response != null)
        {
            var Mensaje1 = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Guardado",
                    Detail = "Contacto guardado con exito",
                    Duration = 1000
                };
            notificationServices.Notify(Mensaje1);
            await Task.Delay(1000);
            navigationManager.NavigateTo("/VIndex");
        }
        else
        {
            var Mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error al guardar",
                    Detail = "Ha ocurrido un error",
                    Duration = 1_000
                };
            notificationServices.Notify(Mensaje);
        }
    }

    public string ObtenerProducto(int id)
    {
        var dato = Productos.FirstOrDefault(c => c.ProductoId == id);

        return dato.Nombre;
    }


    public async Task AgregarDetalle()
    {
        if (!ValidarDetalleCompleto())
        {
            return;
        }

        var productoSeleccionado = Productos.FirstOrDefault(p => p.ProductoId == Producto);
        if (productoSeleccionado != null)
        {
            if (Cantidad <= productoSeleccionado.Cantidad)
            {
                int cantidadRestante = productoSeleccionado.Cantidad - Cantidad;

                if (cantidadRestante >= 0)
                {
                    float precioVentaDetalle = Cantidad * productoSeleccionado.PrecioVenta;
                    var nuevoDetalle = new VentaDetalle
                        {
                            ProductoId = Producto,
                            Cantidad = Cantidad,
                            PrecioVenta = precioVentaDetalle
                        };

                    ventas.VentaDetalle.Add(nuevoDetalle);
                    ventas.Valor += precioVentaDetalle * Cantidad;

                    var mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = "Detalle agregado",
                            Detail = "Se ha agregado un nuevo detalle a la venta",
                            Duration = 3000
                        };
                    notificationServices.Notify(mensaje);

                    StateHasChanged();
                }
                else
                {
                    var mensajeError = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error al agregar detalle",
                            Detail = "La cantidad ingresada es mayor que la cantidad disponible del producto",
                            Duration = 3000
                        };
                    notificationServices.Notify(mensajeError);
                }
            }
            else
            {
                var mensajeError = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error al agregar detalle",
                        Detail = "La cantidad ingresada es mayor que la cantidad disponible del producto",
                        Duration = 3000
                    };
                notificationServices.Notify(mensajeError);
            }
        }
    }



    public bool ValidarDetalleCompleto()
    {

        if (Producto == 0 || Cantidad == 0)
        {
            var mensajeError = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error al guardar",
                    Detail = "Por favor complete todos los campos del detalle y asegúrese de que la cantidad sea mayor que cero",
                    Duration = 3000
                };
            notificationServices.Notify(mensajeError);
            return false;
        }

        return true;
    }


    public async Task EliminarDetalle(VentaDetalle detalle)
    {
        // Obtener el precio del detalle eliminado
        float precioDetalleEliminado = detalle.PrecioVenta;

        // Remover el detalle de la lista de detalles de la venta
        ventas.VentaDetalle.Remove(detalle);

        // Restar el precio del detalle eliminado al valor total de la venta
        ventas.Valor -= precioDetalleEliminado * Cantidad;

        // Mostrar notificación de éxito
        var mensaje = new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Detalle eliminado",
                Detail = "Detalle eliminado",
                Duration = 1_000
            };
        notificationServices.Notify(mensaje);
    }





}
