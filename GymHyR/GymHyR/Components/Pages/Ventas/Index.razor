@page "/VIndex"
@using Library
@using GymHyR.Services
@inject VentasServices ventasService
@inject NavigationManager navigationManager
@inject ProductosServices productosServices
@rendermode InteractiveServer

<PageTitle>Ventas</PageTitle>

<div class="container">
    <div class="card shadow-lg">
        <div class="card-header">


            <h3>Historial de vetas</h3>
            <div>
                <a href="/" class="btn btn-outline-primary"><i class="bi bi-arrow-left"></i> </a>
                <a href="/CreateVentas" class="btn btn-outline-primary">Crear ventas</a>
            </div>

            <div class="row justify-content-end">
                <div class="col-4">
                    <label>Cantidad de ventas:</label>
                    <span class="badge bg-secondary">@ventas.Count()</span>
                </div>
            </div>


            <div class="card-body">
                <div class="justify-content-center">

                    @* Fechas *@
                    <div class="mb-3">
                        <div class="row">
                            <div class="col-3">
                                <label class="form-label" for="desde"><strong>Desde:</strong></label>
                                <InputDate id="desde" class="form-control" @bind-Value="desde"></InputDate>
                            </div>
                            <div class="col-3">
                                <label class="form-label" for="hasta"><strong>Hasta:</strong></label>
                                <InputDate id="hasta" class="form-control" @bind-Value="hasta"></InputDate>
                            </div>
                        </div>
                    </div>

                    @* Campos a Filtrar *@
                    <div class="mb-3">
                        <div class="row align-items-center">
                            <div class="col-4">
                                <label class="form-label" for="filtro"><strong>Campo a Filtrar:</strong></label>
                                <InputSelect id="filtro" class="form-select" @bind-Value="filtro">
                                    <option>Elije una opci&oacute;n</option>
                                    <option value="id">Id</option>
                                    <option value="Producto">Producto</option>
                                </InputSelect>
                            </div>
                            <div class="col-auto miFlecha">
                                <p>→</p>
                            </div>
                            <div class="col-4">
                                <div class="input-group">
                                    <InputText class="form-control" @bind-Value="valorFiltro" placeholder="Ingrese un dato para filtrar"></InputText>
                                    <button type="button" class="btn btn-outline-primary" @onclick="Buscar"><i class="bi bi-search" /></button>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>

                <table class="table">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Fecha de venta</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>

                    <tbody>
                        @if (ventas.Count == 0)
                        {
                            @mensaje
                        }
                        else
                        {
                            @foreach (var venta in ventas)
                            {
                                <tr>
                                    <td>@venta.VentaId</td>
                                    <td>@venta.Fecha.ToShortDateString()</td>
                                    <td>
                                        <div>
                                            <a href="/EditVenta/@venta.VentaId" class="btn btn-outline-primary"><i class="bi bi-pencil-fill" /> Editar</a>
                                            <a href="/ViewVenta/@venta.VentaId" class="btn btn-outline-primary"><i class="bi bi-eyes" /> View</a>
                                            <a href="/DeleteVentas/@venta.VentaId" class="btn btn-outline-danger"><i class="bi bi-trash-fill" /> Eliminar</a>
                                        </div>
                                    </td>
                                </tr>
                            }


                        }
                    </tbody>

                </table>

            </div>
        </div>
    </div>
</div>

@code {
    private List<Ventas> ventas = new List<Ventas>();
    public IEnumerable<Productos> Productos { get; set; } = new List<Productos>();
    public string filtro { get; set; }
    public string valorFiltro { get; set; }
    public DateTime desde { get; set; } = DateTime.Today;
    public DateTime hasta { get; set; } = DateTime.Today;
    public string mensaje = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ventas = (await ventasService.GetVentas()).ToList();
            Productos = await productosServices.GetProductos();
            if (ventas == null || !ventas.Any())
                mensaje = "No hay datos";
        }
        catch (Exception ex)
        {
            mensaje = $"Error al cargar datos: {ex.Message}";
        }
    }

    public async Task Buscar()
    {
        try
        {
            if (desde > hasta)
            {
                mensaje = "La fecha inicial no puede ser mayor a la fecha final";
                StateHasChanged();
                await Nuevo();
                return;
            }

            else if (filtro == null)
            {
                mensaje = "Debe elegir un método para filtrar";
                StateHasChanged();
                await Nuevo();
                return;
            }

            else if (valorFiltro == null)
            {
                mensaje = "Debe ingresar un dato";
                StateHasChanged();
                await Nuevo();
                return;
            }

            switch (filtro)
            {
                case "id":
                    if (int.TryParse(valorFiltro, out int id))
                    {
                        var resultadoId = ventas.FirstOrDefault(p => p.VentaId == id);
                        if (resultadoId != null && (resultadoId.Fecha >= desde && resultadoId.Fecha <= hasta))
                        {
                            ventas.Clear();
                            ventas.Add(resultadoId);
                        }
                        else
                            mensaje = "No se encontraron resultados";
                    }
                    else
                    {
                        mensaje = "El valor ingresado para el ID no es válido";
                    }
                    break;

                case "fecha":
                    // Lógica para filtrar por fecha
                    break;

                default:
                    mensaje = "Opción de filtro no válida";
                    break;
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al buscar datos: {ex.Message}";
        }

        StateHasChanged();
        await Nuevo();
    }

    public async Task Nuevo()
    {
        mensaje = string.Empty;
    }
}

